# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from move_robot/plot_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class plot_data(genpy.Message):
  _md5sum = "6b90cbb3473e15ae3fe0a7a90e7e54aa"
  _type = "move_robot/plot_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 curr_velocity_x
float64 curr_velocity_y
float64 des_velocity_x
float64 des_velocity_y
float64 t_iter
float64 delta
float64 t_horizon
float64 avoid_i
float64 a_long
float64 a_lat
float64 vel_mag
float64 a_long_lv
float64 a_lat_wv
float64 accel"""
  __slots__ = ['curr_velocity_x','curr_velocity_y','des_velocity_x','des_velocity_y','t_iter','delta','t_horizon','avoid_i','a_long','a_lat','vel_mag','a_long_lv','a_lat_wv','accel']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       curr_velocity_x,curr_velocity_y,des_velocity_x,des_velocity_y,t_iter,delta,t_horizon,avoid_i,a_long,a_lat,vel_mag,a_long_lv,a_lat_wv,accel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(plot_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.curr_velocity_x is None:
        self.curr_velocity_x = 0.
      if self.curr_velocity_y is None:
        self.curr_velocity_y = 0.
      if self.des_velocity_x is None:
        self.des_velocity_x = 0.
      if self.des_velocity_y is None:
        self.des_velocity_y = 0.
      if self.t_iter is None:
        self.t_iter = 0.
      if self.delta is None:
        self.delta = 0.
      if self.t_horizon is None:
        self.t_horizon = 0.
      if self.avoid_i is None:
        self.avoid_i = 0.
      if self.a_long is None:
        self.a_long = 0.
      if self.a_lat is None:
        self.a_lat = 0.
      if self.vel_mag is None:
        self.vel_mag = 0.
      if self.a_long_lv is None:
        self.a_long_lv = 0.
      if self.a_lat_wv is None:
        self.a_lat_wv = 0.
      if self.accel is None:
        self.accel = 0.
    else:
      self.curr_velocity_x = 0.
      self.curr_velocity_y = 0.
      self.des_velocity_x = 0.
      self.des_velocity_y = 0.
      self.t_iter = 0.
      self.delta = 0.
      self.t_horizon = 0.
      self.avoid_i = 0.
      self.a_long = 0.
      self.a_lat = 0.
      self.vel_mag = 0.
      self.a_long_lv = 0.
      self.a_lat_wv = 0.
      self.accel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14d().pack(_x.curr_velocity_x, _x.curr_velocity_y, _x.des_velocity_x, _x.des_velocity_y, _x.t_iter, _x.delta, _x.t_horizon, _x.avoid_i, _x.a_long, _x.a_lat, _x.vel_mag, _x.a_long_lv, _x.a_lat_wv, _x.accel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.curr_velocity_x, _x.curr_velocity_y, _x.des_velocity_x, _x.des_velocity_y, _x.t_iter, _x.delta, _x.t_horizon, _x.avoid_i, _x.a_long, _x.a_lat, _x.vel_mag, _x.a_long_lv, _x.a_lat_wv, _x.accel,) = _get_struct_14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14d().pack(_x.curr_velocity_x, _x.curr_velocity_y, _x.des_velocity_x, _x.des_velocity_y, _x.t_iter, _x.delta, _x.t_horizon, _x.avoid_i, _x.a_long, _x.a_lat, _x.vel_mag, _x.a_long_lv, _x.a_lat_wv, _x.accel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.curr_velocity_x, _x.curr_velocity_y, _x.des_velocity_x, _x.des_velocity_y, _x.t_iter, _x.delta, _x.t_horizon, _x.avoid_i, _x.a_long, _x.a_lat, _x.vel_mag, _x.a_long_lv, _x.a_lat_wv, _x.accel,) = _get_struct_14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14d = None
def _get_struct_14d():
    global _struct_14d
    if _struct_14d is None:
        _struct_14d = struct.Struct("<14d")
    return _struct_14d
