// Generated by gencpp from file move_robot/mission_plot_data.msg
// DO NOT EDIT!


#ifndef MOVE_ROBOT_MESSAGE_MISSION_PLOT_DATA_H
#define MOVE_ROBOT_MESSAGE_MISSION_PLOT_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace move_robot
{
template <class ContainerAllocator>
struct mission_plot_data_
{
  typedef mission_plot_data_<ContainerAllocator> Type;

  mission_plot_data_()
    : t_mission(0.0)
    , d_min(0.0)
    , t_comp(0.0)
    , a_rms(0.0)  {
    }
  mission_plot_data_(const ContainerAllocator& _alloc)
    : t_mission(0.0)
    , d_min(0.0)
    , t_comp(0.0)
    , a_rms(0.0)  {
  (void)_alloc;
    }



   typedef double _t_mission_type;
  _t_mission_type t_mission;

   typedef double _d_min_type;
  _d_min_type d_min;

   typedef double _t_comp_type;
  _t_comp_type t_comp;

   typedef double _a_rms_type;
  _a_rms_type a_rms;





  typedef boost::shared_ptr< ::move_robot::mission_plot_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::move_robot::mission_plot_data_<ContainerAllocator> const> ConstPtr;

}; // struct mission_plot_data_

typedef ::move_robot::mission_plot_data_<std::allocator<void> > mission_plot_data;

typedef boost::shared_ptr< ::move_robot::mission_plot_data > mission_plot_dataPtr;
typedef boost::shared_ptr< ::move_robot::mission_plot_data const> mission_plot_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::move_robot::mission_plot_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::move_robot::mission_plot_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::move_robot::mission_plot_data_<ContainerAllocator1> & lhs, const ::move_robot::mission_plot_data_<ContainerAllocator2> & rhs)
{
  return lhs.t_mission == rhs.t_mission &&
    lhs.d_min == rhs.d_min &&
    lhs.t_comp == rhs.t_comp &&
    lhs.a_rms == rhs.a_rms;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::move_robot::mission_plot_data_<ContainerAllocator1> & lhs, const ::move_robot::mission_plot_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace move_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::move_robot::mission_plot_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_robot::mission_plot_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_robot::mission_plot_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_robot::mission_plot_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_robot::mission_plot_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_robot::mission_plot_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::move_robot::mission_plot_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc7d6c5759137cf046d2c010b9c936e4";
  }

  static const char* value(const ::move_robot::mission_plot_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc7d6c5759137cf0ULL;
  static const uint64_t static_value2 = 0x46d2c010b9c936e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::move_robot::mission_plot_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "move_robot/mission_plot_data";
  }

  static const char* value(const ::move_robot::mission_plot_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::move_robot::mission_plot_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 t_mission\n"
"float64 d_min\n"
"float64 t_comp\n"
"float64 a_rms\n"
;
  }

  static const char* value(const ::move_robot::mission_plot_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::move_robot::mission_plot_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.t_mission);
      stream.next(m.d_min);
      stream.next(m.t_comp);
      stream.next(m.a_rms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mission_plot_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::move_robot::mission_plot_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::move_robot::mission_plot_data_<ContainerAllocator>& v)
  {
    s << indent << "t_mission: ";
    Printer<double>::stream(s, indent + "  ", v.t_mission);
    s << indent << "d_min: ";
    Printer<double>::stream(s, indent + "  ", v.d_min);
    s << indent << "t_comp: ";
    Printer<double>::stream(s, indent + "  ", v.t_comp);
    s << indent << "a_rms: ";
    Printer<double>::stream(s, indent + "  ", v.a_rms);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVE_ROBOT_MESSAGE_MISSION_PLOT_DATA_H
