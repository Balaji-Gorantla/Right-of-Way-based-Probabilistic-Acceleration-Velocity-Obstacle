// Generated by gencpp from file move_robot/plot_data.msg
// DO NOT EDIT!


#ifndef MOVE_ROBOT_MESSAGE_PLOT_DATA_H
#define MOVE_ROBOT_MESSAGE_PLOT_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace move_robot
{
template <class ContainerAllocator>
struct plot_data_
{
  typedef plot_data_<ContainerAllocator> Type;

  plot_data_()
    : curr_velocity_x(0.0)
    , curr_velocity_y(0.0)
    , des_velocity_x(0.0)
    , des_velocity_y(0.0)
    , t_iter(0.0)
    , delta(0.0)
    , t_horizon(0.0)
    , avoid_i(0.0)
    , a_long(0.0)
    , a_lat(0.0)
    , vel_mag(0.0)
    , a_long_lv(0.0)
    , a_lat_wv(0.0)
    , accel(0.0)  {
    }
  plot_data_(const ContainerAllocator& _alloc)
    : curr_velocity_x(0.0)
    , curr_velocity_y(0.0)
    , des_velocity_x(0.0)
    , des_velocity_y(0.0)
    , t_iter(0.0)
    , delta(0.0)
    , t_horizon(0.0)
    , avoid_i(0.0)
    , a_long(0.0)
    , a_lat(0.0)
    , vel_mag(0.0)
    , a_long_lv(0.0)
    , a_lat_wv(0.0)
    , accel(0.0)  {
  (void)_alloc;
    }



   typedef double _curr_velocity_x_type;
  _curr_velocity_x_type curr_velocity_x;

   typedef double _curr_velocity_y_type;
  _curr_velocity_y_type curr_velocity_y;

   typedef double _des_velocity_x_type;
  _des_velocity_x_type des_velocity_x;

   typedef double _des_velocity_y_type;
  _des_velocity_y_type des_velocity_y;

   typedef double _t_iter_type;
  _t_iter_type t_iter;

   typedef double _delta_type;
  _delta_type delta;

   typedef double _t_horizon_type;
  _t_horizon_type t_horizon;

   typedef double _avoid_i_type;
  _avoid_i_type avoid_i;

   typedef double _a_long_type;
  _a_long_type a_long;

   typedef double _a_lat_type;
  _a_lat_type a_lat;

   typedef double _vel_mag_type;
  _vel_mag_type vel_mag;

   typedef double _a_long_lv_type;
  _a_long_lv_type a_long_lv;

   typedef double _a_lat_wv_type;
  _a_lat_wv_type a_lat_wv;

   typedef double _accel_type;
  _accel_type accel;





  typedef boost::shared_ptr< ::move_robot::plot_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::move_robot::plot_data_<ContainerAllocator> const> ConstPtr;

}; // struct plot_data_

typedef ::move_robot::plot_data_<std::allocator<void> > plot_data;

typedef boost::shared_ptr< ::move_robot::plot_data > plot_dataPtr;
typedef boost::shared_ptr< ::move_robot::plot_data const> plot_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::move_robot::plot_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::move_robot::plot_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::move_robot::plot_data_<ContainerAllocator1> & lhs, const ::move_robot::plot_data_<ContainerAllocator2> & rhs)
{
  return lhs.curr_velocity_x == rhs.curr_velocity_x &&
    lhs.curr_velocity_y == rhs.curr_velocity_y &&
    lhs.des_velocity_x == rhs.des_velocity_x &&
    lhs.des_velocity_y == rhs.des_velocity_y &&
    lhs.t_iter == rhs.t_iter &&
    lhs.delta == rhs.delta &&
    lhs.t_horizon == rhs.t_horizon &&
    lhs.avoid_i == rhs.avoid_i &&
    lhs.a_long == rhs.a_long &&
    lhs.a_lat == rhs.a_lat &&
    lhs.vel_mag == rhs.vel_mag &&
    lhs.a_long_lv == rhs.a_long_lv &&
    lhs.a_lat_wv == rhs.a_lat_wv &&
    lhs.accel == rhs.accel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::move_robot::plot_data_<ContainerAllocator1> & lhs, const ::move_robot::plot_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace move_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::move_robot::plot_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_robot::plot_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_robot::plot_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_robot::plot_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_robot::plot_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_robot::plot_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::move_robot::plot_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b90cbb3473e15ae3fe0a7a90e7e54aa";
  }

  static const char* value(const ::move_robot::plot_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b90cbb3473e15aeULL;
  static const uint64_t static_value2 = 0x3fe0a7a90e7e54aaULL;
};

template<class ContainerAllocator>
struct DataType< ::move_robot::plot_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "move_robot/plot_data";
  }

  static const char* value(const ::move_robot::plot_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::move_robot::plot_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 curr_velocity_x\n"
"float64 curr_velocity_y\n"
"float64 des_velocity_x\n"
"float64 des_velocity_y\n"
"float64 t_iter\n"
"float64 delta\n"
"float64 t_horizon\n"
"float64 avoid_i\n"
"float64 a_long\n"
"float64 a_lat\n"
"float64 vel_mag\n"
"float64 a_long_lv\n"
"float64 a_lat_wv\n"
"float64 accel\n"
;
  }

  static const char* value(const ::move_robot::plot_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::move_robot::plot_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.curr_velocity_x);
      stream.next(m.curr_velocity_y);
      stream.next(m.des_velocity_x);
      stream.next(m.des_velocity_y);
      stream.next(m.t_iter);
      stream.next(m.delta);
      stream.next(m.t_horizon);
      stream.next(m.avoid_i);
      stream.next(m.a_long);
      stream.next(m.a_lat);
      stream.next(m.vel_mag);
      stream.next(m.a_long_lv);
      stream.next(m.a_lat_wv);
      stream.next(m.accel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct plot_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::move_robot::plot_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::move_robot::plot_data_<ContainerAllocator>& v)
  {
    s << indent << "curr_velocity_x: ";
    Printer<double>::stream(s, indent + "  ", v.curr_velocity_x);
    s << indent << "curr_velocity_y: ";
    Printer<double>::stream(s, indent + "  ", v.curr_velocity_y);
    s << indent << "des_velocity_x: ";
    Printer<double>::stream(s, indent + "  ", v.des_velocity_x);
    s << indent << "des_velocity_y: ";
    Printer<double>::stream(s, indent + "  ", v.des_velocity_y);
    s << indent << "t_iter: ";
    Printer<double>::stream(s, indent + "  ", v.t_iter);
    s << indent << "delta: ";
    Printer<double>::stream(s, indent + "  ", v.delta);
    s << indent << "t_horizon: ";
    Printer<double>::stream(s, indent + "  ", v.t_horizon);
    s << indent << "avoid_i: ";
    Printer<double>::stream(s, indent + "  ", v.avoid_i);
    s << indent << "a_long: ";
    Printer<double>::stream(s, indent + "  ", v.a_long);
    s << indent << "a_lat: ";
    Printer<double>::stream(s, indent + "  ", v.a_lat);
    s << indent << "vel_mag: ";
    Printer<double>::stream(s, indent + "  ", v.vel_mag);
    s << indent << "a_long_lv: ";
    Printer<double>::stream(s, indent + "  ", v.a_long_lv);
    s << indent << "a_lat_wv: ";
    Printer<double>::stream(s, indent + "  ", v.a_lat_wv);
    s << indent << "accel: ";
    Printer<double>::stream(s, indent + "  ", v.accel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVE_ROBOT_MESSAGE_PLOT_DATA_H
