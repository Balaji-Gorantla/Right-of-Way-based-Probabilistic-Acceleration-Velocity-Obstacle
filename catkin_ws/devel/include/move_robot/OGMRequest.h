// Generated by gencpp from file move_robot/OGMRequest.msg
// DO NOT EDIT!


#ifndef MOVE_ROBOT_MESSAGE_OGMREQUEST_H
#define MOVE_ROBOT_MESSAGE_OGMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace move_robot
{
template <class ContainerAllocator>
struct OGMRequest_
{
  typedef OGMRequest_<ContainerAllocator> Type;

  OGMRequest_()
    : tb3_id()
    , ogm_node_num()  {
    }
  OGMRequest_(const ContainerAllocator& _alloc)
    : tb3_id(_alloc)
    , ogm_node_num(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _tb3_id_type;
  _tb3_id_type tb3_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ogm_node_num_type;
  _ogm_node_num_type ogm_node_num;





  typedef boost::shared_ptr< ::move_robot::OGMRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::move_robot::OGMRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OGMRequest_

typedef ::move_robot::OGMRequest_<std::allocator<void> > OGMRequest;

typedef boost::shared_ptr< ::move_robot::OGMRequest > OGMRequestPtr;
typedef boost::shared_ptr< ::move_robot::OGMRequest const> OGMRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::move_robot::OGMRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::move_robot::OGMRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::move_robot::OGMRequest_<ContainerAllocator1> & lhs, const ::move_robot::OGMRequest_<ContainerAllocator2> & rhs)
{
  return lhs.tb3_id == rhs.tb3_id &&
    lhs.ogm_node_num == rhs.ogm_node_num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::move_robot::OGMRequest_<ContainerAllocator1> & lhs, const ::move_robot::OGMRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace move_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::move_robot::OGMRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_robot::OGMRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_robot::OGMRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_robot::OGMRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_robot::OGMRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_robot::OGMRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::move_robot::OGMRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c43752e04cc43094d0d29a847153b49";
  }

  static const char* value(const ::move_robot::OGMRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c43752e04cc4309ULL;
  static const uint64_t static_value2 = 0x4d0d29a847153b49ULL;
};

template<class ContainerAllocator>
struct DataType< ::move_robot::OGMRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "move_robot/OGMRequest";
  }

  static const char* value(const ::move_robot::OGMRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::move_robot::OGMRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string tb3_id\n"
"string ogm_node_num\n"
;
  }

  static const char* value(const ::move_robot::OGMRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::move_robot::OGMRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tb3_id);
      stream.next(m.ogm_node_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OGMRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::move_robot::OGMRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::move_robot::OGMRequest_<ContainerAllocator>& v)
  {
    s << indent << "tb3_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.tb3_id);
    s << indent << "ogm_node_num: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ogm_node_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVE_ROBOT_MESSAGE_OGMREQUEST_H
