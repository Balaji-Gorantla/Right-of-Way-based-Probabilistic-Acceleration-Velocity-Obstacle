// Generated by gencpp from file move_robot/xycoordResponse.msg
// DO NOT EDIT!


#ifndef MOVE_ROBOT_MESSAGE_XYCOORDRESPONSE_H
#define MOVE_ROBOT_MESSAGE_XYCOORDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace move_robot
{
template <class ContainerAllocator>
struct xycoordResponse_
{
  typedef xycoordResponse_<ContainerAllocator> Type;

  xycoordResponse_()
    : x2(0.0)
    , y2(0.0)  {
    }
  xycoordResponse_(const ContainerAllocator& _alloc)
    : x2(0.0)
    , y2(0.0)  {
  (void)_alloc;
    }



   typedef double _x2_type;
  _x2_type x2;

   typedef double _y2_type;
  _y2_type y2;





  typedef boost::shared_ptr< ::move_robot::xycoordResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::move_robot::xycoordResponse_<ContainerAllocator> const> ConstPtr;

}; // struct xycoordResponse_

typedef ::move_robot::xycoordResponse_<std::allocator<void> > xycoordResponse;

typedef boost::shared_ptr< ::move_robot::xycoordResponse > xycoordResponsePtr;
typedef boost::shared_ptr< ::move_robot::xycoordResponse const> xycoordResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::move_robot::xycoordResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::move_robot::xycoordResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::move_robot::xycoordResponse_<ContainerAllocator1> & lhs, const ::move_robot::xycoordResponse_<ContainerAllocator2> & rhs)
{
  return lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::move_robot::xycoordResponse_<ContainerAllocator1> & lhs, const ::move_robot::xycoordResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace move_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::move_robot::xycoordResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_robot::xycoordResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_robot::xycoordResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_robot::xycoordResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_robot::xycoordResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_robot::xycoordResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::move_robot::xycoordResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b350b105f3769d082d2f5c76b8cb90b1";
  }

  static const char* value(const ::move_robot::xycoordResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb350b105f3769d08ULL;
  static const uint64_t static_value2 = 0x2d2f5c76b8cb90b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::move_robot::xycoordResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "move_robot/xycoordResponse";
  }

  static const char* value(const ::move_robot::xycoordResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::move_robot::xycoordResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x2\n"
"float64 y2\n"
;
  }

  static const char* value(const ::move_robot::xycoordResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::move_robot::xycoordResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x2);
      stream.next(m.y2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct xycoordResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::move_robot::xycoordResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::move_robot::xycoordResponse_<ContainerAllocator>& v)
  {
    s << indent << "x2: ";
    Printer<double>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<double>::stream(s, indent + "  ", v.y2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVE_ROBOT_MESSAGE_XYCOORDRESPONSE_H
